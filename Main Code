//////////////////////////////////////
=====================================
23/07/2020; 02:17
=====================================
//////////////////////////////////////
//Convolutional.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct sData{
	//Outside of identifiers.
	int memory_holder;
	int mirror[9];
	//Inside of identifiers.
	int sizes[2]; //[0]=lines, [1]=columns
	int imageSize[2];
	int **matrix;
	int *image;
	int *array;
} Dt;
//Dictionary:
//m==memory
//Dt=data, that is, the information for an entire convolution.
//mt=matrix.
//ar=array.
//mr=mirror
//[0]'s are mostly used for identifier. That means using them for the sake of positioning, then all arrays and matrices will have their [0] or [0][0] for identifying the position each one is for the sake of sync.
////////////////////
//Simple functions//
////////////////////
//====================================================
//Memory allocation function.
Dt* mAllocation (int mSize){
	Dt *data;
	data=(Dt*) malloc (mSize*sizeof(Dt)+sizeof(Dt)); //[0].imageSize is always a possible identifier,
	return data;
}
//====================================================
//Array allocation function.
int* mArAllocation (int mSize){
	int *data;
	data=(int*) malloc (mSize*sizeof(int)+sizeof(int)); //[0].imageSize is always a possible identifier,
	return data;
}
//====================================================
//Memory reallocation function.
Dt* mReallocation (Dt data[]){
	data=(Dt*) realloc(data, data[0].imageSize[0]*sizeof(Dt)+sizeof(Dt)+data[0].memory_holder);
	return data;
}
//====================================================
//Matrix memory allocation function.
void mtMAllocation (Dt data[]){
	printf("\nO valor real eh: %i\n", data[data[0].imageSize[0]].sizes[0]);
	int c;
	data[data[0].imageSize[0]].matrix=(int**) malloc(2*(data[data[0].imageSize[0]].sizes[0]*sizeof(int))); //[0].imageSize is always a possible identifier,
	for (c=0;c<=data[data[0].imageSize[0]].sizes[0];c++){ 
		data[data[0].imageSize[0]].matrix[c]=(int*) malloc(2*(data[data[0].imageSize[0]].sizes[0]*sizeof(int)));
	}
	data[0].memory_holder+=(2*(data[data[0].imageSize[0]].sizes[0]*sizeof(int)))*(2*(data[data[0].imageSize[0]].sizes[0]*sizeof(int)));
}
//====================================================
//Metrix creation.
void creatingMt(Dt data[]){
	data[data[0].imageSize[0]].sizes[0]=0;
	data[data[0].imageSize[0]].sizes[1]=0;
	printf("====================================================\n");
	printf("CURRENT POSITION: %i\n", data[0].imageSize[0]);
	printf("please, do insert number of lines (minimun 3): ");
	scanf("%i", &data[data[0].imageSize[0]].sizes[0]);
	data[data[0].imageSize[0]].sizes[0]=data[data[0].imageSize[0]].sizes[0]+4;
//	if (data[data[0].imageSize[0]].sizes[0]<7){
//		data[data[0].imageSize[0]].sizes[0]=7;
//	}
	printf("Please, do insert the number of columns (minimun 3): ");
	scanf("%i", &data[data[0].imageSize[0]].sizes[1]);
	data[data[0].imageSize[0]].sizes[1]=data[data[0].imageSize[0]].sizes[1]+4;
//	if (data[data[0].imageSize[0]].sizes[1]<7){
//		data[data[0].imageSize[0]].sizes[1]=7;
//	}
	mtMAllocation(data);
}
//====================================================
//////////////////
//Main functions//
//////////////////
//====================================================
//Matrix creation.
void mtCreation(Dt data[]){
	int sizes[2],c,j;
	//Creating and allocating the matrix.
	creatingMt(data);
	//Denulifying matrix.
	for (c=0;c<data[data[0].imageSize[0]].sizes[0];c++){
		for (j=0;j<data[data[0].imageSize[0]].sizes[1];j++){
			data[data[0].imageSize[0]].matrix[c][j]=0;
		}
	}
	//Loading matrix.
	for (c=2;c<data[data[0].imageSize[0]].sizes[0]-1;c++){
		for (j=2;j<data[data[0].imageSize[0]].sizes[1]-1;j++){
			printf("Insert the value for [%i][%i] ", c, j);
			scanf("%i", &data[data[0].imageSize[0]].matrix[c][j]);
		}
	}
	data[0].imageSize[0]++;
	printf("\nThe actual size is: %i\n", data[0].imageSize[0]);
	data=mReallocation(data);
}
//====================================================
//Main function.
int main (void){
	int loop=1;
	Dt *data;
	//data=mAllocation(mSize);
	data=mAllocation(1);
	data[0].imageSize[0]=1;
	data[0].memory_holder=8;
	//Main program.
	while(loop!=0){
		printf("====================================================\n");
		printf("Please, do insert your course of action: ");
		printf("\n\t1: creating a matrix.\n\t2: randomizing a matrix.\n\t3: Seing a matrix. \n\t4: Creating a mirror.\n\t5: Seing all mirrors.\n\t6: Convoluting a matrix with a mirror.\n\t7: Seing all convoluted arrays.\n\t8: Seing all convoluted matrices.\n\tType in '0' for exiting.\n");
		printf("Command: ");
		scanf("%i", &loop);
		switch (loop){
			case 0: break;
			case 1: mtCreation(&*data);
//			case 2: mtRandom(&*data);
//			case 3: seeMt(&*data);
//			case 4: createMr(&*data);
//			case 5: seeMr(&*data);
//			case 6: convoluteMt(&*data);
//			case 7: convolutedAr(&*data);
//			case 8: convolutedMt(&*data);
			default: loop=9;
		}
	}
	return 0;
}
//////////////////////////////////////
=====================================
24/07/2020||03:52
=====================================
//////////////////////////////////////
//Dictionary:
//m==memory
//Dt=data, that is, the information for an entire convolution.
//mt=matrix.
//ar=array.
//mr=mirror
//sz=size or sizes.
//im=image;
//id=identifier
//[0]'s are mostly used for identifier. That means using them for the sake of positioning, then all arrays and matrices will have their [0] or [0][0] for identifying the position each one is for the sake of sync.
//Convolutional.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#define PP 12 //Size of a pointer.
#define ML 100 //Memory limit
typedef struct sData{
	int id[2];
	int sz[2];
	int *im;
	int *arIm;
	int **mt;
}Data;
////////////////////
//Simple functions//
////////////////////
//====================================================
//Initial memory allocation.
Data* MAllocation (int mSize){
	Data *data;
	data=(Data*) malloc (mSize*(sizeof(Data)+16)); //[0] is always a possible identifier,
	return data;
}
//====================================================
//Matrix memory allocation function.
void mtMAllocation (Data dt[]){
	int c;
	dt[dt[0].id[0]].mt=(int**) malloc(dt[dt[0].id[0]].sz[0]*PP); //[0].imageSize is always a possible identifier,
	if (dt[dt[0].id[0]].mt==NULL){
		printf("Memory failure.");
		exit(0);
	}
	for (c=0;c<=dt[dt[0].id[0]].sz[0];c++){ 
		dt[dt[0].id[0]].mt[c]=(int*) malloc(dt[dt[0].id[0]].sz[1]*sizeof(int));
		if (dt[dt[0].id[0]].mt[c]==NULL){
			printf("Memory failure.");
			exit(0);
		}
	}
}
//====================================================
//Matrix printer.
void mtPrinter(Data dt[], int position){
	int c,j;
	printf("\n-------------------------\n");
	printf("Matrix in position %i", position);
	printf("\n-------------------------\n");
	for (c=0;c<=dt[position].sz[0];c++){
		for (j=0;j<=dt[position].sz[1];j++){
			if (dt[position].mt[c][j]>=-9 && dt[position].mt[c][j]<=9){
				if(dt[position].mt[c][j]<=9 && dt[position].mt[c][j]>0){
					printf("###%i ", dt[position].mt[c][j]);
				}
				if (dt[position].mt[c][j]>=-9 && dt[position].mt[c][j]<0){
					printf("-##%i ", dt[position].mt[c][j]-=2*dt[position].mt[c][j]);
				}
				if (dt[position].mt[c][j]==0){
					printf("0000 ");
				}
			}
			if (dt[position].mt[c][j]<-9 || dt[position].mt[c][j]>9){
				if (dt[position].mt[c][j]>=-99 || dt[position].mt[c][j]<=99){
					if(dt[position].mt[c][j]<=99 && dt[position].mt[c][j]>0){
						printf("##%i ", dt[position].mt[c][j]);
					}
					if (dt[position].mt[c][j]>=-99 && dt[position].mt[c][j]<0){
						printf("#-%i ", dt[position].mt[c][j]-=2*dt[position].mt[c][j]);
					}
				}
			}
			if (dt[position].mt[c][j]<-99 || dt[position].mt[c][j]>99){
				if (dt[position].mt[c][j]>=-999 && dt[position].mt[c][j]<=999){
					if(dt[position].mt[c][j]<=999 && dt[position].mt[c][j]>0){
						printf("#%i ", dt[position].mt[c][j]);
					}
					if (dt[position].mt[c][j]>=-999 && dt[position].mt[c][j]<0){
						printf("-%i ", dt[position].mt[c][j]-=2*dt[position].mt[c][j]);
					}
				}
			}
		}
		printf("\n");
	}
	printf("\n-------------------------\n");
}
//====================================================
//////////////////
//Main functions//
//////////////////
//====================================================
//Matrix creation.
void creatingMt(Data dt[]){
	dt[dt[0].id[0]].sz[0]=0;
	dt[dt[0].id[0]].sz[1]=0;
	printf("====================================================\n");
	printf("CURRENT POSITION: %i\n", dt[0].id[0]);
	printf("please, do insert number of lines (minimun 3): ");
	scanf("%i", &dt[dt[0].id[0]].sz[0]);
	if (dt[dt[0].id[0]].sz[0]<3){
		dt[dt[0].id[0]].sz[0]=3;
	}
	dt[dt[0].id[0]].sz[0]+=4;
	printf("Please, do insert the number of columns (minimun 3): ");
	scanf("%i", &dt[dt[0].id[0]].sz[1]);
	if (dt[dt[0].id[0]].sz[1]<3){
		dt[dt[0].id[0]].sz[1]=3;
	}
	dt[dt[0].id[0]].sz[1]+=4;
	mtMAllocation(dt);
}
//====================================================
//Matrix loading.
void mtCreation(Data dt[]){
	int c,j;
	//Creating and allocating the matrix.
	creatingMt(dt);
	//Denulifying matrix.
	for (c=0;c<dt[dt[0].id[0]].sz[0];c++){
		for (j=0;j<dt[dt[0].id[0]].sz[1];j++){
			dt[dt[0].id[0]].mt[c][j]=0;
		}
	}
	//Loading matrix.
	for (c=2;c<dt[dt[0].id[0]].sz[0]-2;c++){
		for (j=2;j<dt[dt[0].id[0]].sz[1]-2;j++){
			printf("Insert the value for [%i][%i] ", c-1, j-1);
			scanf("%i", &dt[dt[0].id[0]].mt[c][j]);
		}
	}
	printf("\nNumber: %i\n", dt[dt[0].id[0]].mt[3][3]);
	dt[0].id[0]++;
}
//====================================================
//Random generator.
int ranGen(int lowest, int highest){
	int num;
	num=lowest+(rand()%(highest-lowest+1));
	return num;
}
//====================================================
//Random matrix.
void mtRandom(Data dt[]){
	int c,j,num,l=0,h=101;
	//Creating and allocating the matrix.
	creatingMt(dt);
	//Denulifying matrix.
	for (c=0;c<dt[dt[0].id[0]].sz[0];c++){
		for (j=0;j<dt[dt[0].id[0]].sz[1];j++){
			dt[dt[0].id[0]].mt[c][j]=0;
		}
	}
	//Loading.
	while (l>99 && l<-99){
		printf("Insert the lowest number in range within -99 and 99: ");
		scanf("%i", &l);
		if (l>99 && l<-99){
			printf("Please, insert a valid number.");
		}
	}
	while (h>99 && h<-99){
		printf("Insert the highest number in range within -99 and 99: ");
		scanf("%i", &h);
		if (h>99 && h<-99){
			printf("Please, insert a valid number.");
		}
	}
	for (c=2;c<dt[dt[0].id[0]].sz[0]-2;c++){
		for (j=2;j<dt[dt[0].id[0]].sz[1]-2;j++){
			dt[dt[0].id[0]].mt[c][j]=ranGen(l,h);
		}
	}
	dt[0].id[0]++;
}
//====================================================
//Seing a matrix.
void seing (Data dt[]){
	int position,c,j;
	printf("====================================================\n");
	printf("Insert position '-1' for exiting.\n");
	while (position!=-1){
		printf("Please, insert the position of the desired matrix: ");
		scanf("%i", &position);
		if (position==-1){
			break;
		}
		mtPrinter(dt, position);
	}
}
void mMenu(int loop, Data dt[]){
	switch (loop){
		case 0: break;
		case 1: mtCreation(dt);break;
		case 2: mtRandom(dt);break;
		case 3: seing(dt);break;
//		case 4: createMr(&*dt);
//		case 5: seeMr(&*dt);
//		case 6: convoluteMt(&*dt);
//		case 7: convolutedAr(&*dt);
//		case 8: convolutedMt(&*dt);
		default:break;
	}
}
//====================================================
//Main function.
int main (void){
	int loop=9;
	Data *dt;
	dt=MAllocation(100);
	dt[0].id[0]=1;
	srand(time(NULL));
	//Main program.
	while(loop!=0){
		printf("====================================================\n");
		printf("Please, do insert your course of action: ");
		printf("\n\t1: creating a matrix.\n\t2: randomizing a matrix.\n\t3: Seing a matrix. \n\t4: Creating a mirror.\n\t5: Seing all mirrors.\n\t6: Convoluting a matrix with a mirror.\n\t7: Seing all convoluted arrays.\n\t8: Seing all convoluted matrices.\n\tType in '0' for exiting.\n");
		printf("Command: ");
		scanf("%i", &loop);
		mMenu(loop, dt);

	}
	return 0;
}
//////////////////////////////////////
=====================================
27/07/2020; 06:27
=====================================
//////////////////////////////////////
//Dictionary:
//m==memory
//Dt=data, that is, the information for an entire convolution.
//mt=matrix.
//ar=array.
//mr=mirror
//sz=size or sizes.
//im=image;
//id=identifier
//[0]'s are mostly used for identifier. That means using them for the sake of positioning, then all arrays and matrices will have their [0] or [0][0] for identifying the position each one is for the sake of sync.
//Convolutional.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#define PP 12 //Size of a pointer.
#define ML 6 //Memory limit
typedef struct sData{
	int id[2];
	int sz[2];
	int **mt;
}Data;
typedef struct sMrdata{
	int id[2];
	int mr[9];
}Mrdata;
typedef struct sImdata{
	int id[2];
	int sz[2];
	int mtUsed;
	int mrUsed;
	int **im;
	int *arIm;
}Imdata;
////////////////////
//Simple functions//
////////////////////
//====================================================
//Initial memory allocation.
Data* MAllocation (int mSize){
	Data *data;
	data=(Data*) malloc (mSize*(sizeof(Data)+16)); //[0] is always a possible identifier,
	return data;
}
Mrdata* mrMAllocation (int mSize){
	Mrdata *mrdata;
	mrdata=(Mrdata*) malloc (mSize*(sizeof(Mrdata)+12)); //[0] is always a possible identifier,
	return mrdata;
}
Imdata* imMAllocation (int mSize){
	Imdata *imdata;
	imdata=(Imdata*) malloc (mSize*(sizeof(Imdata)+16)); //[0] is always a possible identifier,
	return imdata;
}
//====================================================
//Matrix memory allocation function.
void mtMAllocation (Data dt[]){
	int c;
	dt[dt[0].id[0]].mt=(int**) malloc(dt[dt[0].id[0]].sz[0]*PP); //[0]. is always a possible identifier,
	if (dt[dt[0].id[0]].mt==NULL){
		printf("Memory failure.");
		exit(0);
	}
	for (c=0;c<=dt[dt[0].id[0]].sz[0];c++){ 
		dt[dt[0].id[0]].mt[c]=(int*) malloc(dt[dt[0].id[0]].sz[1]*sizeof(int));
		if (dt[dt[0].id[0]].mt[c]==NULL){
			printf("Memory failure.");
			exit(0);
		}
	}
}
//====================================================
//Image matrix memory allocation function.
void imMAllocation(Imdata imdt[]){
	int c;
	imdt[imdt[0].id[0]].im=(int**) malloc(imdt[imdt[0].id[0]].sz[0]*PP); //[0]. is always a possible identifier,
	if (imdt[imdt[0].id[0]].im==NULL){
		printf("Memory failure.");
		exit(0);
	}
	for (c=0;c<=imdt[imdt[0].id[0]].sz[0];c++){ 
		imdt[imdt[0].id[0]].im[c]=(int*) malloc(imdt[imdt[0].id[0]].sz[1]*sizeof(int));
		if (imdt[imdt[0].id[0]].im[c]==NULL){
			printf("Memory failure.");
			exit(0);
		}
	}
}
//====================================================
//Matrix printer.
void mtPrinter(Data dt[], int position){
	int c,j;
	printf("\n-------------------------\n");
	printf("Matrix in position %i", position);
	printf("\n-------------------------\n");
	for (c=0;c<=dt[position].sz[0]-1;c++){
		for (j=0;j<=dt[position].sz[1]-1;j++){
			if (dt[position].mt[c][j]>=-9 && dt[position].mt[c][j]<=9){
				if(dt[position].mt[c][j]<=9 && dt[position].mt[c][j]>0){
					printf("####%i ", dt[position].mt[c][j]);
				}
				if (dt[position].mt[c][j]>=-9 && dt[position].mt[c][j]<0){
					printf("###-%i ", dt[position].mt[c][j]-=2*dt[position].mt[c][j]);
				}
			}
			if (dt[position].mt[c][j]<-9 || dt[position].mt[c][j]>9){
				if (dt[position].mt[c][j]>=-99 || dt[position].mt[c][j]<=99){
					if(dt[position].mt[c][j]<=99 && dt[position].mt[c][j]>0){
						printf("###%i ", dt[position].mt[c][j]);
					}
					if (dt[position].mt[c][j]>=-99 && dt[position].mt[c][j]<0){
						printf("##-%i ", dt[position].mt[c][j]-=2*dt[position].mt[c][j]);
					}
				}
			}
			if (dt[position].mt[c][j]<-99 || dt[position].mt[c][j]>99){
				if (dt[position].mt[c][j]>=-999 && dt[position].mt[c][j]<=999){
					if(dt[position].mt[c][j]<=999 && dt[position].mt[c][j]>0){
						printf("##%i ", dt[position].mt[c][j]);
					}
					if (dt[position].mt[c][j]>=-999 && dt[position].mt[c][j]<0){
						printf("#-%i ", dt[position].mt[c][j]-=2*dt[position].mt[c][j]);
					}
				}
			}
			if (dt[position].mt[c][j]<-999 || dt[position].mt[c][j]>999){
				if (dt[position].mt[c][j]>=-9999 && dt[position].mt[c][j]<=9999){
					if(dt[position].mt[c][j]<=9999 && dt[position].mt[c][j]>0){
						printf("##%i ", dt[position].mt[c][j]);
					}
					if (dt[position].mt[c][j]>=-9999 && dt[position].mt[c][j]<0){
						printf("#-%i ", dt[position].mt[c][j]-=2*dt[position].mt[c][j]);
					}
				}
			}
			if (dt[position].mt[c][j]==0 || dt[position].mt[c][j]==NULL){
					printf("00000 ");
				}
		}
		printf("\n");
	}
	printf("\n-------------------------\n");
}
//====================================================
//Mirror printer.
void mrPrinter(Mrdata mrdt[], int position){
	int c;
		printf("\n-------------------------\n");
		printf("Mirror in position %i: | ", position);
		for (c=0;c<9;c++){
			printf("%i, ", mrdt[position].mr[c]);
		}
		printf("|\n-------------------------\n");
}
//====================================================
//////////////////
//Main functions//
//////////////////
//====================================================
//Matrix creation.
void creatingMt(Data dt[]){
	dt[dt[0].id[0]].sz[0]=0;
	dt[dt[0].id[0]].sz[1]=0;
	printf("====================================================\n");
	printf("CURRENT POSITION: %i\n", dt[0].id[0]);
		printf("please, do insert number of lines (minimun 3): ");
		scanf("%i", &dt[dt[0].id[0]].sz[0]);
		if (dt[dt[0].id[0]].sz[0]<3){
			printf("You have inserted a too small number; thus size becomes '3'.\n");
			dt[dt[0].id[0]].sz[0]=3;
		}
		dt[dt[0].id[0]].sz[0]+=4;
		printf("Please, do insert the number of columns (minimun 3): ");
		scanf("%i", &dt[dt[0].id[0]].sz[1]);
		if (dt[dt[0].id[0]].sz[1]<3){
			printf("You have inserted a too small number; thus size becomes '3'.\n");
			dt[dt[0].id[0]].sz[1]=3;
		}
		dt[dt[0].id[0]].sz[1]+=4;
	mtMAllocation(dt);
}
//====================================================
//Matrix loading.
void mtCreation(Data dt[]){
	int c,j,num;
	//Creating and allocating the matrix.
	creatingMt(dt);
	//Denulifying matrix.
	for (c=0;c<dt[dt[0].id[0]].sz[0];c++){
		for (j=0;j<dt[dt[0].id[0]].sz[1];j++){
			dt[dt[0].id[0]].mt[c][j]=0;
		}
	}
	//Loading matrix.
	for (c=2;c<dt[dt[0].id[0]].sz[0]-2;c++){
		for (j=2;j<dt[dt[0].id[0]].sz[1]-2;j++){
			do {
				printf("Insert the value for [%i][%i] ", c-1, j-1);
				scanf("%i", &num);
				if (num!=0){
					dt[dt[0].id[0]].mt[c][j]=num;
				}
				else{
					dt[dt[0].id[0]].mt[c][j]==NULL;
				}
			}while (dt[dt[0].id[0]].mt[c][j]>99 || dt[dt[0].id[0]].mt[c][j]<-99);
		}
	}
	printf("\nNumber: %i\n", dt[dt[0].id[0]].mt[3][3]);
	dt[0].id[0]++;
}
//====================================================
//Random generator.
int ranGen(int lowest, int highest){
	int num;
	num=lowest+(rand()%(highest-lowest+1));
	return num;
}
//====================================================
//Random matrix.
void mtRandom(Data dt[]){
	int c,j,num,l,h;
	//Creating and allocating the matrix.
	printf("====================================================\n");
	creatingMt(dt);
	//Denulifying matrix.
	for (c=0;c<dt[dt[0].id[0]].sz[0];c++){
		for (j=0;j<dt[dt[0].id[0]].sz[1];j++){
			dt[dt[0].id[0]].mt[c][j]=0;
		}
	}
	//Loading.
	do{
		do{
			printf("Insert the lowest number in range within -99 and 99: ");
			scanf("%i", &l);
			if (l>99 && l<-99){
				printf("Please, insert a valid number.");
			}
		}while (l>99 || l<-99);
		do{
			printf("Insert the highest number in range within -99 and 99: ");
			scanf("%i", &h);
			if (h>99 && h<-99){
				printf("Please, insert a valid number.");
			}
		}while (h>99 || h<-99);
		if (l>h){
			printf("Invalid numbers; lowest is bigger than highest.\n");
		}
	}while (l>h);
		for (c=2;c<dt[dt[0].id[0]].sz[0]-2;c++){
			for (j=2;j<dt[dt[0].id[0]].sz[1]-2;j++){
				dt[dt[0].id[0]].mt[c][j]=ranGen(l,h);
			}
		}
	dt[0].id[0]++;
}
//====================================================
//Seing a matrix.
void seing (Data dt[]){
	int position,c,j;
	printf("====================================================\n");
	printf("Insert position '-1' for exiting.\n");
	do {
		printf("Please, insert the position of the desired matrix: ");
		scanf("%i", &position);
		if (position==-1){
			return;
		}
		mtPrinter(dt, position);
	}while(position!=-1);
}
//====================================================
//Creating a mirror(or Kernel).
void createMr(Mrdata mrdt[]){
	int c;
	mrdt[0].id[1]++;
	mrdt[0].id[0]++;
//	mrdt=(Mrdata*)realloc(mrdt, mrdt[0].id[1]*(sizeof(Mrdata)+12));
	printf("====================================================\n");
	printf("CURRENT POSITION: %i\n", mrdt[0].id[0]);
	printf("Please, insert nine numbers which are smaller than 10 or bigger than -10. Or insert 11 as number for a random sequence starting from this position.\n");
	for (c=0;c<9;c++){
		do{
			printf("Number %i: ", c+1);
			scanf("%i", &mrdt[mrdt[0].id[0]].mr[c]);
			if (mrdt[mrdt[0].id[0]].mr[c]==11){
				for (c=c;c<9;c++){
					mrdt[mrdt[0].id[0]].mr[c]=ranGen(-9,9);
					printf("Check=%i ", mrdt[mrdt[0].id[0]].mr[c]);
				}
				break;
			}
			if (mrdt[mrdt[0].id[0]].mr[c]>9 || mrdt[mrdt[0].id[0]].mr[c]<-9){
				printf("-------------------------\n");
				printf("Number out of range.");
				printf("\n-------------------------\n");
			}
		}while(mrdt[mrdt[0].id[0]].mr[c]>9 || mrdt[mrdt[0].id[0]].mr[c]<-9);
	}
}
//====================================================
//Seing a mirror (or Kernel).
void seeMr(Mrdata mrdt[]){
	int c, j;
	printf("====================================================\n");
	for (c=1;c<=mrdt[0].id[0];c++){
		printf("\n-------------------------\n");
		printf("Mirror in position %i: | ", c);
		for (j=0;j<9;j++){
			printf("%i, ", mrdt[c].mr[j]);
		}
		printf("|\n-------------------------\n");
	}
	}
//====================================================
//Convolution.
void convolution (Data dt[], Imdata imdt[], Mrdata mrdt[]){
	int ps, mL=2, mC=2, kL, kC,c,j,mrps,func=0,ar=0,sum=0;
	printf("====================================================\n");
	printf("####################################################\n");
	if (imdt[0].id[0]<10){
	printf("##############Convolution Position %i################\n", imdt[0].id[0]);
	}
	else{
	printf("##############Convolution Position %i#################\n", imdt[0].id[0]);
	}
	//Creating and allocating matrix.
	printf("####################################################\n");
	imdt[0].id[0]++;
	do{
		printf("Please, do insert the position of the desired matrix: ");
		scanf("%i", &ps);
		if (ps>dt[0].id[0]){
			printf("Position out of created matrices range.");
		}
	}while(ps>dt[0].id[0]);
	do{
		printf("Please, do insert the position of the desired mirror: ");
		scanf("%i", &mrps);
	}while(mrps>mrdt[0].id[0]);
//	imdt[imdt[0].id[0]].sz[0]=dt[ps].sz[0];
//	imdt[imdt[0].id[0]].sz[1]=dt[ps].sz[1];
//	imMAllocation(imdt);
	//Creating and allocating array.
	imdt[imdt[0].id[0]].arIm=(int*) malloc ((dt[ps].sz[0]%3+1)*(dt[ps].sz[1]%3+1)*sizeof(int));
	//Denulifying matrix.
	for (c=0;c<imdt[imdt[0].id[0]].sz[0];c++){
		for (j=0;j<imdt[imdt[0].id[0]].sz[1];j++){
			imdt[imdt[0].id[0]].im[c][j]=0;
		}
	}
	printf("Olha isso: %i", dt[ps].mt[5][27]);
	do{
		//Main column position (center of kernel)
		do{
			for (c=0;c<3;c++){
				kL=mL-1+c;
				for (j=0;j<3;j++){
					kC=mC-1+j;
					sum=sum+(dt[ps].mt[kL][kC]*mrdt[mrps].mr[func]);
					func++;
					printf("Processing: [%i][%i]", kL,kC);
				}		
			}
//			imdt[imdt[0].id[0]].im[mL][mC]=sum;
			imdt[imdt[0].id[0]].arIm[ar]=sum;
			ar++;
			sum=0;
			func=0;
			mC+=3;
		}while(dt[ps].mt[mL+1][mC+1]!=0 && dt[ps].mt[mL][mC+1]!=0 && dt[ps].mt[mL-1][mC+1]!=0);
		mC=2;
		mL+=3;
	}while(dt[ps].mt[mL+1][mC+1]!=0 || dt[ps].mt[mL+2][mC+2]!=0);
	mL=-1;
	printf("Check=%i", imdt[imdt[0].id[0]].arIm[0]);
}
//====================================================
//Main function.
int main (void){
	int loop=9;
	Data *dt; 
	Imdata *imdt; 
	Mrdata *mrdt;
	dt=MAllocation(ML);
	dt[0].id[0]=1;
	imdt=imMAllocation(ML);
	imdt[0].id[0]=0;
	mrdt=mrMAllocation(ML);
	mrdt[0].id[0]=0;
	mrdt[0].id[1]=2;
	srand(time(NULL));
	//Main program.
	while(loop!=0){
		printf("====================================================\n");
		printf("Please, do insert your course of action: ");
		printf("\n\t1: creating a matrix.\n\t2: randomizing a matrix.\n\t3: Seing a matrix. \n\t4: Creating a mirror.\n\t5: Seing all mirrors.\n\t6: Convoluting a matrix with a mirror.\n\t7: Seing all convoluted arrays.\n\t8: Seing all convoluted matrices.\n\tType in '0' for exiting.\n");
		printf("Command: ");
		scanf("%i", &loop);
		switch (loop){
			case 0: break;
			case 1: mtCreation(dt); break;
			case 2: mtRandom(dt); break;
			case 3: seing(dt); break;
			case 4: createMr(mrdt); break;
			case 5: seeMr(mrdt); break;
			case 6: convolution(dt, imdt, mrdt); break;
//			case 7: convolutedAr(&*dt);
//			case 8: convolutedMt(&*dt);
			default:;
		}
	}
	free(dt);
	free(imdt);
	free(mrdt);
	return 0;
}
